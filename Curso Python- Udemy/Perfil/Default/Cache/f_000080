{"version":3,"file":"chunk-edit.js","sources":["app/assets/modules/github/behaviors/commenting/edit.ts"],"sourcesContent":["// Commenting: Edit and delete buttons\n\nimport {fire, on} from 'delegated-events'\n\nimport {dialog} from '../../details-dialog'\nimport {fetchSafeDocumentFragment} from '../../fetch'\nimport {hasDirtyFields} from '../../has-interactions'\nimport {observe} from 'selector-observer'\nimport {remoteForm} from '@github/remote-form'\nimport {updateContent} from '../../updatable-content'\n\nlet bodyErrors: string[] = []\n\n// Edit button\non('click', '.js-comment-edit-button', function (event) {\n  const container = event.currentTarget.closest<HTMLElement>('.js-comment')!\n  container.classList.add('is-comment-editing')\n\n  container.querySelector<HTMLElement>('.js-write-tab')!.click()\n  const field = container.querySelector<HTMLElement>('.js-comment-field')!\n  ;(field as HTMLTextAreaElement).focus()\n  // Trigger size-to-fit (see #15696)\n  fire(field, 'change')\n  const dropdown = event.currentTarget.closest('.js-dropdown-details')\n  if (dropdown) {\n    dropdown.removeAttribute('open')\n  }\n})\n\n// Show minimize form button\non('click', '.js-comment-hide-button', function (event) {\n  const comment = event.currentTarget.closest<HTMLElement>('.js-comment')!\n  const minimizeForm = comment.querySelector('.js-minimize-comment')\n  /* eslint-disable-next-line github/no-d-none */\n  if (minimizeForm) minimizeForm.classList.remove('d-none')\n\n  const dropdown = event.currentTarget.closest('.js-dropdown-details')\n  if (dropdown) {\n    dropdown.removeAttribute('open')\n  }\n})\n\n// Hide minimize form button\non('click', '.js-comment-hide-minimize-form', function (event) {\n  const minimizeForm = event.currentTarget.closest<HTMLElement>('.js-minimize-comment')!\n  /* eslint-disable-next-line github/no-d-none */\n  minimizeForm.classList.add('d-none')\n})\n\n// Comment Cancel button\nexport function handleCommentCancelButtonClick(event: Event & {currentTarget: Element}) {\n  const form = event.currentTarget.closest<HTMLFormElement>('form')!\n  const confirmText = event.currentTarget.getAttribute('data-confirm-text')!\n  if (hasDirtyFields(form) && !confirm(confirmText)) {\n    return false\n  }\n\n  for (const field of form.querySelectorAll('input, textarea')) {\n    const fieldEl = field as HTMLInputElement | HTMLTextAreaElement\n    fieldEl.value = fieldEl.defaultValue\n\n    if (fieldEl.classList.contains('session-resumable-canceled')) {\n      fieldEl.classList.add('js-session-resumable')\n      fieldEl.classList.remove('session-resumable-canceled')\n    }\n  }\n\n  const comment = event.currentTarget.closest('.js-comment')\n  if (comment) {\n    comment.classList.remove('is-comment-editing')\n  }\n\n  return true\n}\non('click', '.js-comment-cancel-button', handleCommentCancelButtonClick)\n\n// Issue edit cancel\non('click', '.js-cancel-issue-edit', function (event) {\n  const container = event.currentTarget.closest<HTMLElement>('.js-details-container')!\n  container.querySelector<HTMLElement>('.js-comment-form-error')!.hidden = true\n})\n\n// Show loading state for updating, deleting, minimizing, and unminimizing\n// Add version so server can decide if we're working with fresh data\nremoteForm(\n  '.js-comment-delete, .js-comment .js-comment-update, .js-issue-update, .js-comment-minimize, .js-comment-unminimize',\n  function (form, wants, request) {\n    const comment = form.closest<HTMLElement>('.js-comment')!\n    comment.classList.add('is-comment-loading')\n    const bodyVersion = comment.getAttribute('data-body-version')\n    if (bodyVersion) {\n      request.headers.set('X-Body-Version', bodyVersion)\n    }\n  }\n)\n\n// Rejected updates that are stale freezes the form and shows an error.\n// See AbstractRepositoryController#render_stale_error for stale error response.\nremoteForm('.js-comment .js-comment-update', async function (form, wants) {\n  let response\n  const comment = form.closest<HTMLElement>('.js-comment')!\n  const updateError = comment.querySelector('.js-comment-update-error')\n  const bodyError = comment.querySelector('.js-comment-body-error')\n  if (updateError instanceof HTMLElement) {\n    updateError.hidden = true\n  }\n  if (bodyError instanceof HTMLElement) {\n    bodyError.hidden = true\n  }\n  bodyErrors = []\n\n  try {\n    response = await wants.json()\n  } catch (error) {\n    if (error.response.status === 422) {\n      const data = JSON.parse(error.response.text)\n\n      if (data.errors) {\n        if (updateError instanceof HTMLElement) {\n          // eslint-disable-next-line i18n-text/no-en\n          updateError.textContent = `There was an error posting your comment: ${data.errors.join(', ')}`\n          updateError.hidden = false\n        }\n        return\n      }\n    } else {\n      throw error\n    }\n  }\n\n  if (!response) return\n  const data = response.json\n\n  if (data.errors && data.errors.length > 0) {\n    bodyErrors = data.errors\n    showBodyErrors(bodyError as HTMLElement)\n  }\n\n  const commentBody = comment.querySelector('.js-comment-body')\n  if (commentBody && data.body) {\n    commentBody.innerHTML = data.body\n  }\n\n  comment.setAttribute('data-body-version', data.newBodyVersion)\n  const bodyVersionInput = comment.querySelector('.js-body-version')\n  if (bodyVersionInput instanceof HTMLInputElement) {\n    bodyVersionInput.value = data.newBodyVersion\n  }\n\n  for (const field of comment.querySelectorAll('input, textarea')) {\n    const fieldEl = field as HTMLInputElement | HTMLTextAreaElement\n    fieldEl.defaultValue = fieldEl.value\n  }\n\n  // If the comment was previously stale, remove the warning as it is now fresh\n  comment.classList.remove('is-comment-stale', 'is-comment-editing')\n\n  const edits = comment.querySelector('.js-comment-edit-history')\n  if (edits) {\n    const html = await fetchSafeDocumentFragment(document, data.editUrl)\n    edits.innerHTML = ''\n    edits.append(html)\n  }\n})\n\n// this block will show the error block if there were errors on body modification\nobserve('.js-comment-body-error', {\n  add: el => {\n    if (bodyErrors && bodyErrors.length > 0) {\n      showBodyErrors(el as HTMLElement)\n    }\n  }\n})\n\nfunction showBodyErrors(el: HTMLElement) {\n  const ol = el.querySelector('ol')\n  if (ol) {\n    ol.innerHTML = ''\n    const items = bodyErrors.map(e => {\n      const li = document.createElement('li')\n      li.textContent = e\n      return li\n    })\n    for (const li of items) {\n      ol.appendChild(li)\n    }\n  }\n  el.hidden = false\n}\n\n// Hide loading state for updating, deleting, minimizing, and unminimizing\nremoteForm(\n  '.js-comment .js-comment-delete, .js-comment .js-comment-update, .js-comment-minimize, .js-comment-unminimize',\n  async function (form, wants) {\n    const comment = form.closest<HTMLElement>('.js-comment')!\n    try {\n      await wants.text()\n    } catch (error) {\n      if (error.response.status === 422) {\n        let data\n        try {\n          data = JSON.parse(error.response.text)\n        } catch (e) {\n          // Do nothing\n        }\n\n        if (data && data.stale) comment.classList.add('is-comment-stale')\n      } else {\n        throw error\n      }\n    }\n\n    comment.classList.remove('is-comment-loading')\n  }\n)\n\nremoteForm('.js-discussion-comment-unminimize, .js-discussion-comment-minimize', async function (form, wants) {\n  const comment = form.closest<HTMLElement>('.js-discussion-comment')!\n  const minimizeError = comment.querySelector<HTMLElement>('.js-discussion-comment-error')\n  if (minimizeError) {\n    minimizeError.hidden = true\n  }\n\n  try {\n    const response = await wants.html()\n    comment.replaceWith(response.html)\n  } catch (error) {\n    if (error.response.status >= 400 && error.response.status < 500) {\n      if (error.response.html) {\n        const errorMessage = error.response.html.querySelector('.js-discussion-comment')!.getAttribute('data-error')!\n        if (minimizeError instanceof HTMLElement) {\n          minimizeError.textContent = errorMessage\n          minimizeError.hidden = false\n        }\n      }\n    } else {\n      throw error\n    }\n  }\n})\n\n// Remove comment if deleted successfully\nremoteForm('.js-comment-delete', async function (form, wants) {\n  await wants.json()\n  let container = form.closest('.js-comment-delete-container')\n\n  if (!container) {\n    container = form.closest('.js-comment-container') || form.closest('.js-line-comments')\n\n    if (container && container.querySelectorAll('.js-comment').length !== 1) {\n      container = form.closest<HTMLElement>('.js-comment')!\n    }\n  }\n\n  container!.remove()\n})\n\n// Update issue/PR/discussion title if successful\nremoteForm('.js-issue-update', async function (form, wants) {\n  const container = form.closest<HTMLElement>('.js-details-container')!\n  const errorDisplay = container.querySelector<HTMLElement>('.js-comment-form-error')!\n\n  let response\n  try {\n    response = await wants.json()\n  } catch (error) {\n    // eslint-disable-next-line i18n-text/no-en\n    errorDisplay.textContent = error.response?.json?.errors?.[0] || 'Something went wrong. Please try again.'\n    errorDisplay.hidden = false\n  }\n\n  if (!response) return\n\n  container.classList.remove('open')\n  errorDisplay.hidden = true\n  const data = response.json\n  if (data.issue_title != null) {\n    container.querySelector<HTMLElement>('.js-issue-title')!.textContent = data.issue_title\n    const issuesContainer = container.closest('.js-issues-results')\n    if (issuesContainer) {\n      if (issuesContainer.querySelector('.js-merge-pr.is-merging')) {\n        const mergeField = issuesContainer.querySelector('.js-merge-pull-request textarea')\n        if (mergeField instanceof HTMLTextAreaElement && mergeField.value === mergeField.defaultValue) {\n          mergeField.value = mergeField.defaultValue = data.issue_title\n        }\n      } else if (issuesContainer.querySelector('.js-merge-pr.is-squashing')) {\n        const mergeField = issuesContainer.querySelector('.js-merge-pull-request .js-merge-title')\n        if (mergeField instanceof HTMLInputElement && mergeField.value === mergeField.defaultValue) {\n          mergeField.value = mergeField.defaultValue = data.default_squash_commit_title\n        }\n      }\n\n      const mergeButton = issuesContainer.querySelector('button[value=merge]')\n      if (mergeButton) {\n        mergeButton.setAttribute('data-input-message-value', data.issue_title)\n      }\n\n      const squashInput = issuesContainer.querySelector('button[value=squash]')\n      if (squashInput) {\n        squashInput.setAttribute('data-input-title-value', data.default_squash_commit_title)\n      }\n    }\n  }\n  document.title = data.page_title\n  for (const field of form.elements) {\n    if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {\n      field.defaultValue = field.value\n    }\n  }\n})\n\n// Hide comment if minimized successfully\nremoteForm('.js-comment-minimize', async function (form, wants) {\n  await wants.json()\n  const comment = form.closest<HTMLElement>('.js-comment')!\n\n  const minimizeForm = comment.querySelector('.js-minimize-comment')\n\n  if (minimizeForm && minimizeForm.classList.contains('js-update-minimized-content')) {\n    const submitButton = form.querySelector<HTMLInputElement | HTMLButtonElement>(\n      'input[type=submit], button[type=submit]'\n    )\n\n    if (submitButton) {\n      submitButton.classList.add('disabled')\n    }\n    const updatableCommentContainer = comment.closest<HTMLElement>('.js-comment-container')\n    if (updatableCommentContainer) {\n      await updateContent(updatableCommentContainer)\n    }\n  } else {\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizeForm) minimizeForm.classList.add('d-none')\n    const unminimizedComment = form.closest<HTMLElement>('.unminimized-comment')!\n    /* eslint-disable-next-line github/no-d-none */\n    unminimizedComment.classList.add('d-none')\n    unminimizedComment.classList.remove('js-comment')\n\n    const commentGroup = form.closest<HTMLElement>('.js-minimizable-comment-group')!\n    const minimizedComment = commentGroup.querySelector('.minimized-comment')\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizedComment) minimizedComment.classList.remove('d-none')\n    if (minimizedComment) minimizedComment.classList.add('js-comment')\n  }\n})\n\n// Show comment if unminimized successfully\nremoteForm('.js-comment-unminimize', async function (form, wants) {\n  await wants.json()\n  const commentGroup = form.closest<HTMLElement>('.js-minimizable-comment-group')!\n  const unminimizedComment = commentGroup.querySelector('.unminimized-comment')\n  const minimizedComment = commentGroup.querySelector('.minimized-comment')\n\n  if (unminimizedComment) {\n    /* eslint-disable-next-line github/no-d-none */\n    unminimizedComment.classList.remove('d-none')\n    unminimizedComment.classList.add('js-comment')\n\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizedComment) minimizedComment.classList.add('d-none')\n    if (minimizedComment) minimizedComment.classList.remove('js-comment')\n  } else {\n    // if the unminimizedComment is not present at this point,\n    // try to fetch it from the server\n    if (minimizedComment) {\n      const actionForm = minimizedComment.querySelector('.timeline-comment-actions')\n      // hide form while waiting for updated content\n      /* eslint-disable-next-line github/no-d-none */\n      if (actionForm) actionForm.classList.add('d-none')\n      minimizedComment.classList.remove('js-comment')\n    }\n\n    const updatableCommentContainer = commentGroup.closest<HTMLElement>('.js-comment-container')!\n    await updateContent(updatableCommentContainer)\n  }\n})\n\non(\n  'details-menu-select',\n  '.js-comment-edit-history-menu',\n  event => {\n    const url = (event as CustomEvent).detail.relatedTarget.getAttribute('data-edit-history-url')\n    if (!url) return\n    // Prevent menu from closing\n    event.preventDefault()\n    const content = fetchSafeDocumentFragment(document, url)\n    dialog({content, dialogClass: 'Box-overlay--wide'})\n  },\n  {capture: true}\n)\n"],"names":["bodyErrors","handleCommentCancelButtonClick","event","form","currentTarget","closest","confirmText","getAttribute","hasDirtyFields","confirm","field","querySelectorAll","fieldEl","value","defaultValue","classList","contains","add","remove","comment","showBodyErrors","el","ol","querySelector","innerHTML","items","map","e","li","document","createElement","textContent","appendChild","hidden","on","container","click","focus","fire","dropdown","removeAttribute","minimizeForm","remoteForm","wants","request","bodyVersion","headers","set","async","response","updateError","bodyError","HTMLElement","json","error","status","data","JSON","parse","text","errors","join","length","commentBody","body","setAttribute","newBodyVersion","bodyVersionInput","HTMLInputElement","edits","html","fetchSafeDocumentFragment","editUrl","append","observe","stale","minimizeError","replaceWith","errorMessage","errorDisplay","issue_title","issuesContainer","mergeField","HTMLTextAreaElement","default_squash_commit_title","mergeButton","squashInput","title","page_title","elements","submitButton","updatableCommentContainer","updateContent","unminimizedComment","minimizedComment","commentGroup","actionForm","url","detail","relatedTarget","preventDefault","content","dialog","dialogClass","capture"],"mappings":"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"}